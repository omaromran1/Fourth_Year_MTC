% Desired pole
zeta = 0.5;  % Desired damping ratio
omega = 20;  % Desired natural frequency
real_part = -zeta * omega;
imag_part = omega * sqrt(1 - zeta^2);
desired_pole = real_part + 1j * imag_part;

% Define the original system
numerator = [1];
denominator = [1, 3, 2];
G = tf(numerator, denominator);

% Objective function for optimization
function cost = compensator_tuning(params, G, desired_pole)
    alpha = params(1);  % Lead compensator parameter
    tau = params(2);    % Time constant
    compensator = tf([tau, 1], [alpha * tau, 1]);
    G_compensated = compensator * G;
    
    % Check distance between desired pole and root locus
    [rlocus_points, ~] = rlocus(G_compensated);
    distances = abs(rlocus_points(:) - desired_pole);
    cost = min(distances);  % Minimize distance to desired pole
end

% Initial guess for alpha and tau
initial_params = [0.1, 0.1];

% Perform optimization
optimized_params = fminsearch(@(params) compensator_tuning(params, G, desired_pole), initial_params);

% Extract optimized parameters
alpha_opt = optimized_params(1);
tau_opt = optimized_params(2);

% Create the optimized compensator
compensator_opt = tf([tau_opt, 1], [alpha_opt * tau_opt, 1]);
G_compensated_opt = compensator_opt * G;

% Plot the compensated root locus
figure;
rlocus(G_compensated_opt);
hold on;
plot(real(desired_pole), imag(desired_pole), 'ro', 'MarkerSize', 10, 'LineWidth', 2);
grid on;
title('Optimized Compensated Root Locus');
legend('Optimized Compensated Root Locus', 'Desired Pole');

% Check if the pole lies on the root locus
[rlocus_points_opt, ~] = rlocus(G_compensated_opt);
tolerance = 1e-6;
is_on_locus_opt = any(abs(rlocus_points_opt(:) - desired_pole) < tolerance);

% Display results
if is_on_locus_opt
    disp(['The desired pole (', num2str(real(desired_pole)), ' + ', num2str(imag(desired_pole)), 'j) now lies on the compensated root locus.']);
    disp(['Optimized Lead Compensator: C(s) = (', num2str(tau_opt), 's + 1) / (', num2str(alpha_opt * tau_opt), 's + 1)']);
else
    disp(['The desired pole (', num2str(real(desired_pole)), ' + ', num2str(imag(desired_pole)), 'j) still does NOT lie on the compensated root locus.']);
end


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMPARISON DIV ELSE FOR ID IF LBRACE LPAREN MINUS MULT NUMBER PLUS RBRACE RETURN RPAREN SEMICOLON TYPE WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : declaration\n                 | assignment\n                 | RETURN expression SEMICOLON\n                 | if_statement\n                 | while_statement\n                 | for_statementdeclaration : TYPE ID SEMICOLON\n                   | TYPE ID ASSIGN expression SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN expression RPAREN block\n                    | IF LPAREN expression RPAREN block ELSE blockwhile_statement : WHILE LPAREN expression RPAREN blockfor_statement : FOR LPAREN for_initializer SEMICOLON for_condition SEMICOLON for_increment RPAREN blockfor_initializer : declaration\n                       | assignment\n                       | ID ASSIGN expression\n                       | emptyfor_condition : expression\n                     | emptyfor_increment : assignment\n                     | emptyblock : LBRACE statement_list RBRACE\n             | LBRACE RBRACEexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression COMPARISON termterm : factor\n            | term MULT factor\n            | term DIV factorfactor : NUMBER\n              | ID\n              | LPAREN expression RPARENempty :'
    
_lr_action_items = {'RETURN':([0,2,3,4,5,7,8,9,15,27,34,51,56,57,58,59,65,66,68,69,74,],[6,6,-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,6,-15,6,-26,-14,-25,-16,]),'TYPE':([0,2,3,4,5,7,8,9,15,26,27,34,51,56,57,58,59,65,66,68,69,74,],[10,10,-2,-4,-5,-7,-8,-9,-3,10,-6,-10,-12,-11,-13,10,-15,10,-26,-14,-25,-16,]),'ID':([0,2,3,4,5,6,7,8,9,10,15,21,23,24,25,26,27,28,29,30,31,32,34,35,51,54,55,56,57,58,59,65,66,67,68,69,74,],[11,11,-2,-4,-5,20,-7,-8,-9,22,-3,20,20,20,20,42,-6,20,20,20,20,20,-10,20,-12,20,20,-11,-13,11,-15,11,-26,11,-14,-25,-16,]),'IF':([0,2,3,4,5,7,8,9,15,27,34,51,56,57,58,59,65,66,68,69,74,],[12,12,-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,12,-15,12,-26,-14,-25,-16,]),'WHILE':([0,2,3,4,5,7,8,9,15,27,34,51,56,57,58,59,65,66,68,69,74,],[13,13,-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,13,-15,13,-26,-14,-25,-16,]),'FOR':([0,2,3,4,5,7,8,9,15,27,34,51,56,57,58,59,65,66,68,69,74,],[14,14,-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,14,-15,14,-26,-14,-25,-16,]),'$end':([1,2,3,4,5,7,8,9,15,27,34,51,56,57,59,66,68,69,74,],[0,-1,-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,-15,-26,-14,-25,-16,]),'RBRACE':([3,4,5,7,8,9,15,27,34,51,56,57,58,59,65,66,68,69,74,],[-2,-4,-5,-7,-8,-9,-3,-6,-10,-12,-11,-13,66,-15,69,-26,-14,-25,-16,]),'NUMBER':([6,21,23,24,25,28,29,30,31,32,35,54,55,],[19,19,19,19,19,19,19,19,19,19,19,19,19,]),'LPAREN':([6,12,13,14,21,23,24,25,28,29,30,31,32,35,54,55,],[21,24,25,26,21,21,21,21,21,21,21,21,21,21,21,21,]),'ASSIGN':([11,22,42,],[23,35,55,]),'SEMICOLON':([16,17,18,19,20,22,26,34,36,39,40,41,43,44,45,46,47,48,49,50,51,54,56,60,61,62,63,],[27,-27,-31,-34,-35,34,-37,-10,51,54,-17,-18,-20,-28,-29,-30,-32,-33,-36,56,-12,-37,-11,67,-21,-22,51,]),'PLUS':([16,17,18,19,20,33,36,37,38,44,45,46,47,48,49,50,61,63,],[28,-27,-31,-34,-35,28,28,28,28,-28,-29,-30,-32,-33,-36,28,28,28,]),'MINUS':([16,17,18,19,20,33,36,37,38,44,45,46,47,48,49,50,61,63,],[29,-27,-31,-34,-35,29,29,29,29,-28,-29,-30,-32,-33,-36,29,29,29,]),'COMPARISON':([16,17,18,19,20,33,36,37,38,44,45,46,47,48,49,50,61,63,],[30,-27,-31,-34,-35,30,30,30,30,-28,-29,-30,-32,-33,-36,30,30,30,]),'RPAREN':([17,18,19,20,33,37,38,44,45,46,47,48,49,51,67,70,71,72,],[-27,-31,-34,-35,49,52,53,-28,-29,-30,-32,-33,-36,-12,-37,73,-23,-24,]),'MULT':([17,18,19,20,44,45,46,47,48,49,],[31,-31,-34,-35,31,31,31,-32,-33,-36,]),'DIV':([17,18,19,20,44,45,46,47,48,49,],[32,-31,-34,-35,32,32,32,-32,-33,-36,]),'LBRACE':([52,53,64,73,],[58,58,58,58,]),'ELSE':([57,66,69,],[64,-26,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,58,],[2,65,]),'statement':([0,2,58,65,],[3,15,3,15,]),'declaration':([0,2,26,58,65,],[4,4,40,4,4,]),'assignment':([0,2,26,58,65,67,],[5,5,41,5,5,71,]),'if_statement':([0,2,58,65,],[7,7,7,7,]),'while_statement':([0,2,58,65,],[8,8,8,8,]),'for_statement':([0,2,58,65,],[9,9,9,9,]),'expression':([6,21,23,24,25,35,54,55,],[16,33,36,37,38,50,61,63,]),'term':([6,21,23,24,25,28,29,30,35,54,55,],[17,17,17,17,17,44,45,46,17,17,17,]),'factor':([6,21,23,24,25,28,29,30,31,32,35,54,55,],[18,18,18,18,18,18,18,18,47,48,18,18,18,]),'for_initializer':([26,],[39,]),'empty':([26,54,67,],[43,62,72,]),'block':([52,53,64,73,],[57,59,68,74,]),'for_condition':([54,],[60,]),'for_increment':([67,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','syntax.py',50),
  ('statement_list -> statement','statement_list',1,'p_statement_list','syntax.py',54),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','syntax.py',55),
  ('statement -> declaration','statement',1,'p_statement','syntax.py',59),
  ('statement -> assignment','statement',1,'p_statement','syntax.py',60),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statement','syntax.py',61),
  ('statement -> if_statement','statement',1,'p_statement','syntax.py',62),
  ('statement -> while_statement','statement',1,'p_statement','syntax.py',63),
  ('statement -> for_statement','statement',1,'p_statement','syntax.py',64),
  ('declaration -> TYPE ID SEMICOLON','declaration',3,'p_declaration','syntax.py',68),
  ('declaration -> TYPE ID ASSIGN expression SEMICOLON','declaration',5,'p_declaration','syntax.py',69),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','syntax.py',73),
  ('if_statement -> IF LPAREN expression RPAREN block','if_statement',5,'p_if_statement','syntax.py',77),
  ('if_statement -> IF LPAREN expression RPAREN block ELSE block','if_statement',7,'p_if_statement','syntax.py',78),
  ('while_statement -> WHILE LPAREN expression RPAREN block','while_statement',5,'p_while_statement','syntax.py',82),
  ('for_statement -> FOR LPAREN for_initializer SEMICOLON for_condition SEMICOLON for_increment RPAREN block','for_statement',9,'p_for_statement','syntax.py',86),
  ('for_initializer -> declaration','for_initializer',1,'p_for_initializer','syntax.py',90),
  ('for_initializer -> assignment','for_initializer',1,'p_for_initializer','syntax.py',91),
  ('for_initializer -> ID ASSIGN expression','for_initializer',3,'p_for_initializer','syntax.py',92),
  ('for_initializer -> empty','for_initializer',1,'p_for_initializer','syntax.py',93),
  ('for_condition -> expression','for_condition',1,'p_for_condition','syntax.py',98),
  ('for_condition -> empty','for_condition',1,'p_for_condition','syntax.py',99),
  ('for_increment -> assignment','for_increment',1,'p_for_increment','syntax.py',103),
  ('for_increment -> empty','for_increment',1,'p_for_increment','syntax.py',104),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','syntax.py',108),
  ('block -> LBRACE RBRACE','block',2,'p_block','syntax.py',109),
  ('expression -> term','expression',1,'p_expression','syntax.py',114),
  ('expression -> expression PLUS term','expression',3,'p_expression','syntax.py',115),
  ('expression -> expression MINUS term','expression',3,'p_expression','syntax.py',116),
  ('expression -> expression COMPARISON term','expression',3,'p_expression','syntax.py',117),
  ('term -> factor','term',1,'p_term','syntax.py',122),
  ('term -> term MULT factor','term',3,'p_term','syntax.py',123),
  ('term -> term DIV factor','term',3,'p_term','syntax.py',124),
  ('factor -> NUMBER','factor',1,'p_factor','syntax.py',128),
  ('factor -> ID','factor',1,'p_factor','syntax.py',129),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','syntax.py',130),
  ('empty -> <empty>','empty',0,'p_empty','syntax.py',134),
]
